<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid(270,11)
x_speed=0
y_speed=0
x_accel=0
y_accel=0
wall_jump_on=true
wall_cling_on=true
left_on=true
right_on=true
jump_on=true
image_speed=.25
facing_direction='right'
win_on_screen_out = false
death=false

control_up=ord('W')
control_down=ord('S')
control_left=ord('A')
control_right=ord('D')

hacks=false
if hacks {
    control_low_gravity=ord('L')
    control_high_gravity=ord('K')
    control_flipped_gravity=ord('J')
    control_left_rocket=vk_left
    control_right_rocket=vk_right
    control_up_rocket=vk_up
    control_invuln=vk_space
}

grav=1
max_horiz_speed=10
ground_control_horiz_force=10
air_control_horiz_force=2.5
decel_horiz_force=1
friction_force=2
wall_jump_horiz_force=8
wall_jump_vert_force=15
wall_speed_cap=2
jump_force=18
max_fall_speed=50

key_dictionary=ds_list_create()
ds_list_add(key_dictionary,'A','W','S','D')
unused_letters=ds_list_create()
ds_list_add(unused_letters,'Q','E','R','T','Y','U','I','O','P','F','G','H','J','K','L')
ds_list_add(unused_letters,'Z','X','C','V','B','N','M')

if room == rob3
    alarm[1] = 3600
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death==false or (hacks==true and keyboard_check(control_invuln)){
if hacks{
    if keyboard_check(control_low_gravity)
        grav=0
    else if keyboard_check(control_high_gravity)
        grav=5
    else if keyboard_check(control_flipped_gravity)
        grav=-2
    else
        grav=1
    if keyboard_check(control_invuln)
        death=true
}
runloop=false


if place_free(x,y) {
    if not place_free(x,y+1) { //on solid ground
        if keyboard_check(control_up) and jump_on  {
            y_accel=-jump_force         
        } else {
            y_accel=0
        }
        x_speed=0 //firm stopping when hitting ground
        if keyboard_check(control_left) and left_on{
            x_accel=-ground_control_horiz_force
            if keyboard_check(control_right) and right_on
                x_accel=0 //multiple directions cancel
            else {
                if not audio_is_playing(sound_run){
                    audio_play_sound(sound_run,0,true)
                }
                runloop=true
                facing_direction='left'
            }
        }
        else {
            if keyboard_check(control_right) and right_on{
                facing_direction='right'
                x_accel=ground_control_horiz_force
                if not audio_is_playing(sound_run){
                    audio_play_sound(sound_run,0,true)
                }
                runloop=true
            } else {
                x_accel=0 //firm stop on ground with no key press
            }
        }
    } else {
        y_accel=grav
        if not place_free(x+1,y) { //touching wall on right
            if keyboard_check(control_left) and left_on{
                if keyboard_check(control_right) and right_on
                    x_accel=0 //multiple directions cancel
                else {
                    facing_direction='left'
                    if keyboard_check(control_up) and wall_jump_on{ 
                        //do a wall jump
                        x_accel=-wall_jump_horiz_force
                        y_accel=-wall_jump_vert_force
                        x_speed=0 //brace against wall
                        y_speed=0
                    } else {
                        x_speed=0
                    }
                }
            } else {
                x_speed=0
                if y_speed&gt;wall_speed_cap and keyboard_check(control_right) and right_on and wall_cling_on{ //cling to wall and slow fall
                    y_speed=wall_speed_cap
                    y_accel=0
                }
            }
        } else if not place_free(x-1,y) { //touching wall on left
            if keyboard_check(control_right) and right_on{
                if keyboard_check(control_left) and left_on
                    x_accel=0 //multiple directions cancel
                else {
                    facing_direction='right'
                    if keyboard_check(control_up) and wall_jump_on { //touching wall on left
                        //do a wall jump
                        x_accel=wall_jump_horiz_force
                        y_accel=-wall_jump_vert_force
                        x_speed=0 //brace against wall
                        y_speed=0
                    } else {
                        x_speed=0
                    }
                }
            }
            else {
                x_speed=0
                if y_speed&gt;wall_speed_cap and keyboard_check(control_left) and left_on and wall_cling_on{
                    facing_direction='left'
                    y_speed=wall_speed_cap
                    y_accel=0
                }
            }
        } else { //not touching wall
            if keyboard_check(control_left) and left_on{
                if keyboard_check(control_right)and right_on
                    x_accel=0 //multiple directions cancel
                else {
                    facing_direction='left'
                    if x_speed &lt; 0
                        x_accel=-air_control_horiz_force
                    else
                        x_accel=-decel_horiz_force
                }
            }
            else {
                if keyboard_check(control_right) and right_on{
                    facing_direction='right'
                    if x_speed &gt; 0 //accelerate slow
                        x_accel=air_control_horiz_force
                    else 
                        x_accel=decel_horiz_force
                }
                else { //friction
                    if x_speed&lt;0 
                        if x_speed&lt;-friction_force
                            x_accel=friction_force
                        else
                            x_accel=-x_speed
                    else {
                        if x_speed&gt;0
                            if x_speed&gt;friction_force
                                x_accel=-friction_force
                            else
                                x_accel=-x_speed
                        else 
                            x_accel=0
                    }
                }
            }
        }
    }
    if runloop==false
        audio_stop_sound(sound_run)
    
    if hacks{
        if keyboard_check_pressed(control_left_rocket) {
            x_speed=-120
        } else if keyboard_check_pressed(control_right_rocket) {
            x_speed=120
        } else if keyboard_check_pressed(control_up_rocket) {
            y_speed=-120
        }
    }
    //accelerations set, update speed
    y_speed+=y_accel
    if (x_accel&lt;0 and x_speed&gt;-max_horiz_speed) or (x_accel&gt;0 and x_speed&lt;max_horiz_speed) //stop accelerating when too fast
        x_speed+=x_accel
    else {
        if x_speed&lt;=-max_horiz_speed //cap speed
            x_speed=-max_horiz_speed+(x_speed+max_horiz_speed) div 2
        else if x_speed&gt;=max_horiz_speed
            x_speed=max_horiz_speed+(x_speed-max_horiz_speed) div 2
    }
    if y_speed&gt;max_fall_speed
        y_speed=max_fall_speed
    //move object
    if x_speed&lt;0 {   
        move_contact_solid(180,-x_speed)
        if not place_free(x-1,y)
            x_speed=0
    } else {
        if x_speed&gt;0 {
            move_contact_solid(0,x_speed)
            if not place_free(x+1,y)
                x_speed=0
        }
    }
    if y_speed&lt;0 {
        move_contact_solid(90,-y_speed)
        if not place_free(x,y-1)
            y_speed=0
    }
    else {
        if y_speed&gt;0 {
            move_contact_solid(270,y_speed)
            if not place_free(x,y+1) { //land on solid ground
                y_speed=0
                x_speed=0
            }    
        }
    }
}
else { //inside object?
   //x=200
   //y=400
}


if facing_direction=='left' {
    if place_free(x, y+1) {
        if not place_free(x-1,y) and wall_cling_on{
            sprite_index = player_cling_right
            image_speed=0.05
        } else
            sprite_index = spt_jump_left
    } else if x_speed == 0 {
        sprite_index=player_left
        image_speed = 0.1
    } else {
        sprite_index=player_run_left
        image_speed = 0.25
    } 
} else if facing_direction=='right' {
    if place_free(x, y+1) {
        if not place_free(x+1,y) and wall_cling_on{
            sprite_index = player_cling_left
            image_speed=0.05
        } else 
            sprite_index = spt_jump_right
    } else if x_speed == 0 {
        sprite_index=player_right
        image_speed = 0.1
    } else {
        sprite_index=player_run_right
        image_speed = 0.25
    }
}
} else {
    move_contact_solid(270,3)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_saw_chase">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death==false {
    death=true
    audio_play_sound(sound_death,10,false)
    if facing_direction=="left"
        sprite_index=player_death_left
    else
        sprite_index=player_death_right
    image_speed=.125
    jump_on=false
    left_on=false
    right_on=false
    wall_jump_on=false
    wall_cling_on=false
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_turret">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y-player.y &gt; 50
    instance_destroy()
else {
    if player.death==false {
        player.death=true
        audio_play_sound(sound_death,10,false)
        if player.facing_direction=="left"
            player.sprite_index=player_death_left
        else
            player.sprite_index=player_death_right
        player.image_speed=.125
        player.jump_on=false
        player.left_on=false
        player.right_on=false
        player.wall_jump_on=false
        player.wall_cling_on=false
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spikes">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death==false {
    audio_play_sound(sound_death,10,false)
    death=true
    if facing_direction=="left"
        sprite_index=player_death_left
    else
        sprite_index=player_death_right
    image_speed=.125
    jump_on=false
    left_on=false
    right_on=false
    wall_jump_on=false
    wall_cling_on=false
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bitcoin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == smell_my_pit or room == loop_section{
    if death==false or (hacks==true and keyboard_check(control_invuln)){
        audio_play_sound(sound_death,10,false)
        death=true
        if facing_direction=="left"
            sprite_index=player_death_left
        else
            sprite_index=player_death_right
        image_speed=.125
        jump_on=false
        left_on=false
        right_on=false
        wall_jump_on=false
        wall_cling_on=false
    }
}

else {
    if death==false or (hacks==true and keyboard_check(control_invuln)){
        audio_play_sound(sound_coin,1,false)
        if room == simple_room or room == saw_chase or room == jump_remove or room == long_wall_jump or room==boss_room {
            room_goto_next()
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rob1 or room == rob2 or room == rob3 
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_send_back">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x -= 1024
win_on_screen_out = true
with obj_bitcoin
    instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death==false {
    death=true
    audio_play_sound(sound_death,10,false)
    if facing_direction=="left"
        sprite_index=player_death_left
    else
        sprite_index=player_death_right
    image_speed=.125
    jump_on=false
    left_on=false
    right_on=false
    wall_jump_on=false
    wall_cling_on=false
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death==true and not (hacks==true and keyboard_check(control_invuln))
    room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == smell_my_pit or room == rob1 or room == rob2 or room == random1 or win_on_screen_out
    room_goto_next()
else
    room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>225</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>221</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_previous_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="96">
      <action>
        <libid>1</libid>
        <id>226</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>222</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_next_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="10" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>my_bullet = instance_create(x, y-10, obj_bullet)


if facing_direction=='left'
{
    my_bullet.hspeed = -20
    my_bullet.x += -20
}
else if facing_direction=='right'
{
    my_bullet.hspeed = 20
    my_bullet.x += 20
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
